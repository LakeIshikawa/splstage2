#pragma once

#include <string>
#include <map>

using namespace std;

/****************************************************************//**
*	\file Options.h
*	コマンドラインでパースされるオプションの管理
********************************************************************/

//! オプション
/****************************************************************//**
*	シングルトンパターン\n
*	コマンドラインでパースされるオプションを保存する
*	\nosubgrouping
********************************************************************/
class Options
{

public:
	/************************************************************//**
	*	オプションはあらゆる型を持つタイプです
	****************************************************************/
	typedef union _Option{
		int integ;
		float floa;
		char* str;
	} Option;

	/************************************************************//**
	*	\name ﾗｲﾌ循環
	****************************************************************/
	/*@{*/
	private:
		Options();
		~Options(void);
	/*@}*/

	/************************************************************//**
	*	\name 使うﾒｿｯﾄﾞ
	*	処理に便利な機能を提供するﾒｿｯﾄﾞ。
	****************************************************************/	
	/*@{*/

	public:
		//! インスタンスの取得
		static Options* GetOptions() { return mInstance; }

		//! オプションを追加
		void Add( string key, Option val );

		//! オプションが設定されているかどうかを尋ねる
		bool IsOptionSet( string key );

		//! オプションの値を取得
		Option GetOption( string key );

	/*@}*/

private:
	static Options* mInstance;
	map<string, Option> mMapOptions;
};